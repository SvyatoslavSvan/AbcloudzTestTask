{
	"info": {
		"_postman_id": "30f80c87-9632-42bc-bea5-08108548df94",
		"name": "UsersApi | v1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21460143",
		"_collection_link": "https://www.postman.com/solar-meadow-468000/workspace/abcloudztesttask/collection/21460143-30f80c87-9632-42bc-bea5-08108548df94?action=share&source=collection_link&creator=21460143"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "/api/User with valid fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function() {\r",
											"    pm.expect(pm.response.code).to.equal(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function() {\r",
											"    const ct = pm.response.headers.get(\"Content-Type\") || \"\";\r",
											"    pm.expect(ct).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Created user has id\", function() {\r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"id\");\r",
											"});\r",
											"\r",
											"pm.test(\"Fields match request\", function() {\r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body.fullName).to.eql(\"Alice Smith\");\r",
											"    pm.expect(body.email).to.eql(\"alice.smith@example.com\");\r",
											"    pm.expect(body.dateOfBirth).to.eql(\"1995-06-15\");\r",
											"});\r",
											"\r",
											"const body = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"createdUserId\", body.id);\r",
											"pm.environment.set(\"createdUserFullName\", body.fullName);\r",
											"pm.environment.set(\"createdUserEmail\", body.email);\r",
											"pm.environment.set(\"createdUserDOB\", body.dateOfBirth);\r",
											"\r",
											"pm.test(\"Saved created user variables\", () => {\r",
											"    pm.expect(pm.environment.get(\"createdUserId\")).to.exist;\r",
											"    pm.expect(pm.environment.get(\"createdUserFullName\")).to.eql(\"Alice Smith\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fullName\": \"Alice Smith\",\n  \"email\": \"alice.smith@example.com\",\n  \"dateOfBirth\": \"1995-06-15\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/User",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"User"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"fullName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"dateOfBirth\": \"<date>\",\n  \"id\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/User",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/api/User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response is an array\", () => {\r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Array not empty\", () => {\r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body.length).to.be.above(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Each item has required properties\", () => {\r",
											"    const items = pm.response.json();\r",
											"    items.forEach(item => {\r",
											"        pm.expect(item).to.have.all.keys(\"id\", \"fullName\", \"email\", \"dateOfBirth\");\r",
											"    });\r",
											"});\r",
											"\r",
											"const allUsers = pm.response.json();\r",
											"\r",
											"const id   = parseInt(pm.environment.get(\"createdUserId\"), 10);\r",
											"const name = pm.environment.get(\"createdUserFullName\");\r",
											"const mail = pm.environment.get(\"createdUserEmail\");\r",
											"const dob  = pm.environment.get(\"createdUserDOB\");\r",
											"\r",
											"const user = allUsers.find(u => u.id === id);\r",
											"\r",
											"pm.test(\"New user is in list\", () => {\r",
											"    pm.expect(user, `User with id ${id} must exist`).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"pm.test(\"FullName matches\", () => {\r",
											"    pm.expect(user.fullName).to.eql(name);\r",
											"});\r",
											"\r",
											"pm.test(\"Email matches\", () => {\r",
											"    pm.expect(user.email).to.eql(mail);\r",
											"});\r",
											"\r",
											"pm.test(\"DateOfBirth matches\", () => {\r",
											"    pm.expect(user.dateOfBirth).to.eql(dob);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/User",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"User"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/User",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"User"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/api/User with invalid email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", () => {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Error mentions invalid email\", () => {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.have.property(\"message\");\r",
											"    pm.expect(json.message.toLowerCase()).to.include(\"invalid email format\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fullName\": \"Alice Smith\",\n  \"email\": \"InvalidEmail\",\n  \"dateOfBirth\": \"1995-06-15\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/User",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"User"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/User with invalid date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", () => {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Error mentions invalid email\", () => {\r",
											"    const json = pm.response.json();\r",
											"    pm.expect(json).to.have.property(\"message\");\r",
											"    pm.expect(json.message.toLowerCase()).to.include(\"the field dateofbirth cannot be in the future\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fullName\": \"Alice Smith\",\n  \"email\": \"alice.smith@example.com\",\n  \"dateOfBirth\": \"2028-06-15\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/User",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"User"
									]
								}
							},
							"response": []
						},
						{
							"name": "/api/User/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const savedId = pm.environment.get(\"createdUserId\");\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct id\", function () {\r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"id\");\r",
											"    pm.expect(body.id).to.eql(savedId);\r",
											"});\r",
											"\r",
											"pm.test(\"Returned fields match the created user\", function () {\r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body.fullName).to.eql(pm.environment.get(\"createdUserFullName\"));\r",
											"    pm.expect(body.email).to.eql(pm.environment.get(\"createdUserEmail\"));\r",
											"    pm.expect(body.dateOfBirth).to.eql(pm.environment.get(\"createdUserDOB\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/User/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"User",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{createdUserId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/User/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"User",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/api/User/:id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const savedId = pm.environment.get(\"createdUserId\");\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is empty\", function () {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"Content-Length header is 0\", function () {\r",
											"    const len = pm.response.headers.get(\"Content-Length\");\r",
											"    pm.expect(len).to.eql(\"0\");\r",
											"});\r",
											"\r",
											"pm.environment.unset(\"createdUserId\");\r",
											"pm.environment.unset(\"createdUserFullName\");\r",
											"pm.environment.unset(\"createdUserEmail\");\r",
											"pm.environment.unset(\"createdUserDOB\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/User/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"User",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{createdUserId}}",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/User/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"User",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:7255/"
		}
	]
}